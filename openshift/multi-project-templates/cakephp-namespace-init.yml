---
kind: Template
apiVersion: v1
metadata:
  name: cakephp-example-namespace-init
  annotations:
    openshift.io/display-name: CakePHP Namespace Initialization
    description: >-
      Initializes namespaces for a CakePHP example deployment across multiple namespaces.
      For more information about using this template, including OpenShift
      considerations, see
      https://github.com/xiangyugong/cakephp-ex/blob/master/README.md.
    tags: quickstart,php,cakephp
    iconClass: icon-php
    openshift.io/long-description: >-
      This template defines resources to initialize namespaces for a CakePHP
      application OpenShift build and deployment with separate namespaces for
      build, frontend, and database deployment. Resources created include role
      bindings to pull images from the build namespace, credential secrets, and
      a persistent volume claim.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/documentation-url: https://github.com/xiangyugong/cakephp-ex
    template.openshift.io/bindable: 'false'
message: |-
  The following namespaces have been configured: ${BUILD_NAMESPACE}, ${FRONTEND_NAMESPACE}, ${DATABASE_NAMESPACE}

  For more information about using this template, including OpenShift considerations, see https://github.com/xiangyugong/cakephp-ex/blob/master/README.md.
labels:
  template: cakephp-example-namespace-init
  app: cakephp-example
parameters:
- name: NAME
  displayName: Name
  description: The name assigned to all of the frontend objects defined in this template.
  required: true
  value: cakephp-example
- name: BUILD_NAMESPACE
  displayName: Build Namespace
  description: >-
    The OpenShift Namespace where the ImageStream and BuildConfig reside.
  required: true
  value: cakephp-example-build
- name: FRONTEND_NAMESPACE
  displayName: Frontend Namespace
  description: >-
    The OpenShift Namespace where the Frontend application deployment, route,
    and service reside.
  required: true
  value: cakephp-example-frontend
- name: CAKEPHP_SECRET_TOKEN
  displayName: CakePHP secret token
  description: Set this to a long random string.
  generate: expression
  from: "[\\w]{50}"
- name: CAKEPHP_SECURITY_SALT
  displayName: CakePHP Security Salt
  description: Security salt for session hash.
  generate: expression
  from: "[a-zA-Z0-9]{40}"
- name: DATABASE_NAMESPACE
  displayName: Database Namespace
  description: >-
    The OpenShift Namespace where the Database deployment and service reside.
  required: true
  value: cakephp-example-database
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  required: true
  value: mysql
- name: DATABASE_NAME
  displayName: Database Name
  required: true
  value: default
- name: DATABASE_USER
  displayName: Database User
  required: true
  value: cakephp
- name: DATABASE_PASSWORD
  displayName: Database Password
  generate: expression
  from: "[a-zA-Z0-9]{16}"
- description: Password for the MySQL root user.
  displayName: MySQL root user Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: DATABASE_ROOT_PASSWORD
  required: true
- name: VOLUME_CAPACITY
  displayName: Volume Capacity
  description: Volume space available for data, e.g. 512Mi, 2Gi
  value: 1Gi
  required: true
objects:
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${NAME}
    namespace: ${FRONTEND_NAMESPACE}
  stringData:
    database-host: ${DATABASE_SERVICE_NAME}.${DATABASE_NAMESPACE}.svc
    database-name: ${DATABASE_NAME}
    database-user: ${DATABASE_USER}
    database-password: ${DATABASE_PASSWORD}
    cakephp-secret-token: ${CAKEPHP_SECRET_TOKEN}
    cakephp-security-salt: ${CAKEPHP_SECURITY_SALT}
- kind: Secret
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DATABASE_NAMESPACE}
  stringData:
    database-name: ${DATABASE_NAME}
    database-user: ${DATABASE_USER}
    database-password: ${DATABASE_PASSWORD}
    database-root-password: ${DATABASE_ROOT_PASSWORD}
- kind: PersistentVolumeClaim
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DATABASE_NAMESPACE}
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${VOLUME_CAPACITY}
