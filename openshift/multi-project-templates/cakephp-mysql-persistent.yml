---
kind: Template
apiVersion: v1
metadata:
  name: cakephp-multi-project-mysql-persistent
  annotations:
    openshift.io/display-name: CakePHP MySQL Database
    description: >-
      CakePHP MySQL database configuration for configuration across multiple
      namespaces. For more information about using this template, including
      OpenShift considerations, see
      https://github.com/xiangyugong/cakephp-ex/blob/master/README.md.
    tags: quickstart,php,cakephp
    iconClass: icon-php
    openshift.io/long-description: >-
      This template defines a DeploymentConfig and ImageStream for a CakePHP
      example application. This template is meant to be used with separate
      deployment and namespace initialization templates.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/documentation-url: https://github.com/xiangyugong/cakephp-ex
    template.openshift.io/bindable: 'false'
message: |-
  MySQL database deployment has been configured in project: ${DATABASE_NAMESPACE}.

  For more information about using this template, including OpenShift considerations, see https://github.com/xiangyugong/cakephp-ex/blob/master/README.md.
labels:
  template: cakephp-multi-project-mysql-persistent
  app: cakephp-example
parameters:
- name: DATABASE_NAMESPACE
  displayName: Database Namespace
  description: >-
    The OpenShift Namespace where the Database deployment and service reside.
  required: true
  value: cakephp-example-database
- name: IMAGE_NAMESPACE
  displayName: Image Namespace
  description: The OpenShift Namespace where the PHP S2I ImageStream resides.
  required: true
  value: openshift
- name: MEMORY_MYSQL_LIMIT
  displayName: Memory Limit (MySQL)
  description: Maximum amount of memory the MySQL container can use.
  required: true
  value: 512Mi
- name: DATABASE_SERVICE_NAME
  displayName: Database Service Name
  required: true
  value: mysql
objects:
- kind: Service
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DATABASE_NAMESPACE}
  spec:
    ports:
    - name: mysql
      port: 3306
      targetPort: 3306
    selector:
      name: ${DATABASE_SERVICE_NAME}
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${DATABASE_SERVICE_NAME}
    namespace: ${DATABASE_NAMESPACE}
  spec:
    strategy:
      type: Recreate
      resources:
        requests:
          cpu: 50m
          memory: 100Mi
        limits:
          cpu: 500m
          memory: 100Mi
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - mysql
        from:
          kind: ImageStreamTag
          namespace: ${IMAGE_NAMESPACE}
          name: mysql:5.7
    - type: ConfigChange
    replicas: 1
    selector:
      name: ${DATABASE_SERVICE_NAME}
    template:
      metadata:
        name: ${DATABASE_SERVICE_NAME}
        labels:
          name: ${DATABASE_SERVICE_NAME}
      spec:
        volumes:
        - name: mysql-data
          persistentVolumeClaim:
            claimName: ${DATABASE_SERVICE_NAME}
        containers:
        - name: mysql
          image: " "
          ports:
          - containerPort: 3306
          volumeMounts:
          - name: mysql-data
            mountPath: /var/lib/mysql/data
          readinessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 5
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD="$MYSQL_PASSWORD" mysql -h 127.0.0.1
                -u "$MYSQL_USER" -D "$MYSQL_DATABASE" -e 'SELECT 1'
          livenessProbe:
            timeoutSeconds: 1
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
          env:
          - name: MYSQL_USER
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-user
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-password
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-root-password
                name: ${DATABASE_SERVICE_NAME}
          - name: MYSQL_DATABASE
            valueFrom:
              secretKeyRef:
                name: ${DATABASE_SERVICE_NAME}
                key: database-name
          resources:
            requests:
              cpu: 100m
              memory: ${MEMORY_MYSQL_LIMIT}
            limits:
              cpu: "1"
              memory: ${MEMORY_MYSQL_LIMIT}
- kind: NetworkPolicy
  apiVersion: networking.k8s.io/v1
  metadata:
    name: allow-frontend-to-database
    namespace: 
  spec:
    podSelector:
      matchLabels:
        name: 
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: 
      ports:
      - protocol: TCP
        port: 3306
